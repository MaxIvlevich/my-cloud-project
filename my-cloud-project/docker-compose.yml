services:

  postgres:
    image: postgres:15-alpine
    container_name: postgres_db
    environment:
      POSTGRES_DB: users_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - my_cloud_network
    healthcheck:
          # Проверяем, готова ли БД принимать подключения под нужным пользователем
          test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-users_db}" ]
          interval: 10s
          timeout: 5s
          retries: 5
          start_period: 10s
  # 2. Config Server
  config-server:
    build: ./config-server
    container_name: config_server_app
    ports:
      - "8888:8888"
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      SPRING_CLOUD_CONFIG_SERVER_NATIVE_SEARCH_LOCATIONS: file:///etc/config-repo/
      SPRING_PROFILES_ACTIVE: native
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health
    networks:
        - my_cloud_network
    healthcheck:
          test: [ "CMD", "curl", "-f", "http://localhost:8888/actuator/health" ]
          interval: 15s
          timeout: 5s
          retries: 10
          start_period: 40s
  # 3. Eureka Server
  eureka-server:
    build: ./eureka-server
    container_name: eureka_server_app
    ports:
      - "8761:8761"
    networks:
      - my_cloud_network
    environment:
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health
    healthcheck:
        test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
        interval: 15s
        timeout: 5s
        retries: 10
        start_period: 30s
  # 4. User Service
  user-service:
    build: ./user-service
    container_name: user_service_app
    environment:
      SPRING_CONFIG_IMPORT: configserver:http://config-server:8888
    depends_on:
      postgres:
        condition: service_healthy
      config-server:
          condition: service_healthy
      eureka-server:
        condition: service_started
    networks:
      - my_cloud_network

  # 5. Company Service
  company-service:
    build: ./company-service
    container_name: company_service_app
    environment:
      SPRING_CONFIG_IMPORT: configserver:http://config-server:8888
    networks:
        - my_cloud_network
    depends_on:
      postgres:
        condition: service_healthy
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_started

  # 6. API Gateway
  api-gateway:
    build: ./api-gateway
    container_name: api_gateway_app
    ports:
      - "8080:8080"
    environment:
      SPRING_CONFIG_IMPORT: configserver:http://config-server:8888
    networks:
        - my_cloud_network
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
networks:
  my_cloud_network:
    driver: bridge
volumes:
  postgres_data:
    driver: local
