package max.iv.companyservice.mapper;

import max.iv.companyservice.DTO.CompanyDto;
import max.iv.companyservice.DTO.CreateCompanyDto;
import max.iv.companyservice.DTO.UpdateCompanyDto;
import max.iv.companyservice.DTO.UserDto;
import max.iv.companyservice.model.Company;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;

import java.util.List;
/**
 * Interface defining mapping operations between {@link Company} domain entities and various Company DTOs
 * ({@link CompanyDto}, {@link CreateCompanyDto}, {@link UpdateCompanyDto}).
 * <p>
 * Uses MapStruct for generating the implementation code. The {@code componentModel = "spring"}
 * attribute ensures that the generated implementation is a Spring bean and can be injected.
 * Provides methods for mapping with and without associated employee ({@link UserDto}) details.
 * Custom qualifiers like {@code @CompanyWithEmployeesMapper} and {@code @SimpleCompanyMapper}
 * might be used to distinguish between mapping methods in certain scenarios.
 */
@Mapper(componentModel = "spring")
public interface CompanyMapper {
    /**
     * Maps a {@link Company} entity to a basic {@link CompanyDto}, explicitly ignoring the employees list.
     * <p>
     * Use this method when only the core company details are needed, without associated employee information.
     * The {@code employees} field in the resulting {@link CompanyDto} will be {@code null} or empty.
     *
     * @param company The source {@link Company} entity. Must not be null.
     * @return The mapped {@link CompanyDto} without employee information.
     */
    @Mapping(target = "employees", ignore = true)
    CompanyDto toCompanyDto(Company company);
    /**
     * Maps a {@link Company} entity and a pre-fetched list of {@link UserDto} employees
     * to a combined {@link CompanyDto}.
     * <p>
     * This method is intended to be used when employee details have already been fetched separately.
     * It combines the core company data from the {@code company} entity with the provided {@code employees} list.
     * The {@code @CompanyWithEmployeesMapper} qualifier might be used to select this method explicitly.
     *
     * @param company   The source {@link Company} entity. Must not be null.
     * @param employees A list of {@link UserDto} objects representing the employees associated with the company.
     *                  This list is mapped directly to the {@code employees} field of the resulting DTO. Can be {@code null} or empty.
     * @return The mapped {@link CompanyDto} including the provided list of employees.
     */
    @CompanyWithEmployeesMapper
    @Mapping(source = "company.id", target = "id")
    @Mapping(source = "company.companyName", target = "companyName")
    @Mapping(source = "company.budget", target = "budget")
    @Mapping(source = "employees", target = "employees")
    CompanyDto toCompanyDtoWithEmployees(Company company, List<UserDto> employees);
    /**
     * Maps a list of {@link Company} entities to a list of {@link CompanyDto} objects.
     * <p>
     * MapStruct will typically delegate the mapping of each element in the list
     * to the {@link #toCompanyDto(Company)} method by default (unless qualified otherwise).
     * Therefore, the resulting {@link CompanyDto} objects in the list will likely *not* contain employee information.
     *
     * @param companies The list of {@link Company} entities to map. Must not be null.
     * @return A new list containing {@link CompanyDto} objects corresponding to the input entities,
     *         likely without employee details. Returns an empty list if the input list is empty.
     */
    List<CompanyDto> toCompanyDtoList(List<Company> companies);
    /**
     * Maps a {@link CreateCompanyDto} to a new {@link Company} entity.
     * <p>
     * Used during the creation of a new company. The {@code id} field is ignored as it will be
     * generated by the database upon persistence. The {@code employeeIds} list is also ignored,
     * as employee associations are typically managed after the company is created.
     *
     * @param createCompanyDto The DTO containing the data for the company to be created. Must not be null.
     * @return A new {@link Company} entity populated with data from the DTO, ready to be persisted.
     *         The {@code employeeIds} list will likely be {@code null} or empty.
     */
    @Mapping(target = "id", ignore = true)
    @Mapping(target = "employeeIds", ignore = true)
    Company createCompanyDtoToCompany(CreateCompanyDto createCompanyDto);
    /**
     * Updates an existing {@link Company} entity with data from an {@link UpdateCompanyDto}.
     * <p>
     * This method applies changes from the {@code updateCompanyDto} to the provided {@code company} entity
     * (marked with {@code @MappingTarget}). The {@code id} is ignored to prevent changing the
     * entity's identifier. The {@code employeeIds} list is also ignored, as modifications to the
     * list of associated employees should be handled by dedicated service methods (e.g., adding/removing employees).
     *
     * @param updateCompanyDto The DTO containing the updated company data. Must not be null.
     * @param company          The existing {@link Company} entity (annotated with {@code @MappingTarget})
     *                         to be updated in place. Must not be null. Note: This object will be modified.
     */

    @Mapping(target = "id", ignore = true)
    @Mapping(target = "employeeIds", ignore = true)
    void updateCompanyFromDto(UpdateCompanyDto updateCompanyDto, @MappingTarget Company company);
    /**
     * Maps a {@link Company} entity to a simple {@link CompanyDto}, explicitly ignoring the employees list.
     * <p>
     * This method serves a similar purpose to {@link #toCompanyDto(Company)} but might be selected
     * using the {@code @SimpleCompanyMapper} qualifier in specific mapping contexts where clarity
     * about excluding employees is paramount or different default mappings are needed elsewhere.
     * It ensures the {@code employees} field is not populated.
     *
     * @param company The source {@link Company} entity. Must not be null.
     * @return The mapped {@link CompanyDto} without employee information.
     */
    @SimpleCompanyMapper
    @Mapping(target = "employees", ignore = true)
    CompanyDto toSimpleCompanyDto(Company company);
}
